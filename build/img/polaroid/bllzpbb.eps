%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 12.0.0
%%For: (MELA) (no)
%%Title: (polaroid [Converted].eps)
%%CreationDate: 1/10/2010 4:40 PM
%%BoundingBox: 117 -118 685 726
%%HiResBoundingBox: 117.6318 -117.9785 684.1289 725.9932
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBCustomColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_Cropmarks: 101.793 -151.1191 701.502 748.4453
%AI3_TemplateBox: 402.293 297.9453 402.293 297.9453
%AI3_TileBox: 113.6475 -107.9568 689.6475 711.1631
%AI3_DocumentPreview: Header
%AI5_ArtSize: 599.709 899.5645
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -248.207 840.4453 0.6667 1266 899 282 0 0 7 88 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 10 4 10 4 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(UnitCell class) (Artlandia SymmetryWorks Plug-in) (Artlandia SymmetryWorks.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
6 Bn
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 0 3 Bd
[
<
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0F0F0F0F0F0F101010101112131314
>
<
080808080808080808080808080808080808080808080808080808080A09090A0A090A0B0B0B
>
<
16161616161616161616161616161616161616171717171818181A1A1A1C1D1E202123242729
>
0
<
EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEDEDEDEDECECEBEBEA
>
<
EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEDEDEDECECECEBEAEAE9
>
<
E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E5E5E5E5E4E4E4E3E3E2E1E0DFDEDDDBDAD8D6
>
4 %_Br
<
14141313121111101010100F0F0F0F0F0F0F0F0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
>
<
0B0A0B0A0A0B090A0A09090A0A08080808080809080808080808080808080808080808080808
>
<
29292625232221201E1D1C1C1A1B1A1A18181816171717171616161616161616161616161616
>
0
<
EAEAEBEBECECECEDEDEDEDEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
<
E9EAEAEBEBEBECECECEDEDEDEDEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
<
D6D7D9DADBDCDDDEDFE0E1E1E2E2E3E3E4E4E4E5E5E5E5E5E6E6E6E6E6E6E6E6E6E6E6E6E6E6
>
4 %_Br
[
0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 50 100 %_BS
%_0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 50 100 Bs
0.05098 0.031373 0.086275 0 0.937255 0.937255 0.901961 2 86.6178 50 %_BS
%_0.05098 0.031373 0.086275 0 0.937255 0.937255 0.901961 2 86.6178 50 Bs
0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 18.3374 0 %_BS
%_0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 18.3374 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 10)
(Unnamed gradient 10) 0 3 Bd
[
<
0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0F0F0F0F0F0F1010101112131314
>
<
08080808080808080808080808080808080808080808080908080808080A09090A090A0B0B0B
>
<
16161616161616161616161616161616161616171717171818181A1A1B1C1D1F202123242729
>
0
<
EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEDEDEDECECEBEBEA
>
<
EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEDEDEDECECEBEAEAE9
>
<
E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E6E5E5E5E5E4E4E4E3E3E2E1E0DFDEDDDBDAD8D6
>
4 %_Br
<
14141313121111101010100F0F0F0F0F0F0F0F0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D
>
<
0B0A0B0A0A0B090A0A09090A0A08080808080809080808080808080808080808080808080808
>
<
29292625232221201E1D1C1C1A1B1A1A18181816171717171616161616161616161616161616
>
0
<
EAEAEBEBECECECEDEDEDEDEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
<
E9EAEAEBEBEBECECECEDEDEDEDEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
<
D6D7D9DADBDCDDDEDFE0E1E1E2E2E3E3E4E4E4E5E5E5E5E5E6E6E6E6E6E6E6E6E6E6E6E6E6E6
>
4 %_Br
[
0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 50 100 %_BS
%_0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 50 100 Bs
0.05098 0.031373 0.086275 0 0.937255 0.937255 0.901961 2 87 50 %_BS
%_0.05098 0.031373 0.086275 0 0.937255 0.937255 0.901961 2 87 50 Bs
0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 18.2927 0 %_BS
%_0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 18.2927 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 2)
(Unnamed gradient 2) 0 6 Bd
[
<
5C5B5A58575655535251504F4E4C4B4B4A49484645444342413F3E3D3C3B
>
<
4847464544434241403F3E3D3C3B3A383736353534333231302F2E2D2C2B
>
<
4544434241403F3E3D3C3B3A3938373433323231302F2E2D2C2B2A292827
>
0
<
A7A8A9AAABACADAEAFB0B1B2B3B4B5B5B6B7B8B9BABBBCBDBEBFC0C1C2C3
>
<
A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6
>
<
ACADAEAFB0B1B2B3B4B5B6B7B8B9BABCBDBEBFC0C1C2C3C4C5C6C7C8C9CA
>
4 %_Br
<
6867666462615F5E5C
>
<
5251504F4D4C4B4948
>
<
4D4C4B4A4A49484645
>
<
010101010000000000
>
<
9E9FA0A1A3A4A5A6A7
>
<
A0A1A2A3A5A6A7A8A9
>
<
A4A5A6A7A8A9AAABAC
>
4 %_Br
<
4041424344464748494A4B4C4E4F505152555657585A5B5D5E5F61626364666768
>
<
3435363738393A3B3B3C3D3E3F404142434344454648494A4A4B4C4D4E4F505152
>
<
2E2F30313232333435363738393A3B3C3D3E3F404142434545464748494A4B4C4D
>
<
000000000000000000000000000000000000000000000000000000000101010101
>
<
BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFADACABAAA9A8A7A6A5A4A3A2A1A09F9E
>
<
BEBDBCBBBAB9B8B7B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A8A7A6A5A4A3A2A1A0
>
<
C2C1C0BFBEBDBCBBBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4
>
4 %_Br
<
6E6D6C6B6A69686765646362605F5E5C5B5A58575655535251504F4D4C4B4A494847464444434241
40
>
<
55545352515251504F4E4D4C4A4B4A484746454443434241403F3E3D3E3D3C3B3A39393837363535
34
>
<
51504F4E4D4D4C4B4A494847464645444241403F3E3E3D3C3B3A3938383736353433323231302F2F
2E
>
<
02010101010101010101000000000000000000000000000000000000000000000000000000000000
00
>
<
98999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBBBCBDBE
BF
>
<
9C9D9E9FA0A0A1A2A3A4A5A6A7A7A8A9AAABACADAEAEAFB0B1B2B3B4B4B5B6B7B8B9B9BABBBCBDBD
BE
>
<
A0A1A2A3A4A4A5A6A7A8A9AAABABACADAEAFB0B1B2B2B3B4B5B6B7B8B8B9BABBBCBDBDBEBFC0C1C1
C2
>
4 %_Br
<
45464748494A4B4D4E4F50515253555657585A5B5C5E5F60626364656768696A6B6C6D6E
>
<
353637383738393A3B3D3E3F40414241424344454748494A4C4D4E4F4E4F505152535455
>
<
33343535373838393A3A3B3C3D3E3F4140414243444647484748494A4C4D4E4D4E4F5051
>
<
000000000000000000000000000000000000000000000000000001010101010101010102
>
<
BBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A9998
>
<
BCBBBAB9B9B8B7B6B5B4B3B2B1B0AFAFAEADACABAAA9A8A7A6A5A4A3A3A2A1A09F9E9D9C
>
<
BEBDBCBCBBBAB9B8B7B7B6B5B4B3B2B1B1B0AFAEADACABAAAAA9A8A7A6A5A4A4A3A2A1A0
>
4 %_Br
[
0.231373 0.168627 0.152941 0 0.764706 0.776471 0.792157 2 50 100 %_BS
%_0.231373 0.168627 0.152941 0 0.764706 0.776471 0.792157 2 50 100 Bs
0.360784 0.282353 0.270588 0 0.654902 0.662745 0.67451 2 50 99.995 %_BS
%_0.360784 0.282353 0.270588 0 0.654902 0.662745 0.67451 2 50 100 Bs
0.407843 0.321569 0.301961 0.003922 0.619608 0.627451 0.643137 2 50 86.5168 %_BS
%_0.407843 0.321569 0.301961 0.003922 0.619608 0.627451 0.643137 2 50 86.5168 Bs
0.25098 0.203922 0.180392 0 0.74902 0.745098 0.760784 2 50 65.1685 %_BS
%_0.25098 0.203922 0.180392 0 0.74902 0.745098 0.760784 2 50 65.1685 Bs
0.431373 0.333333 0.317647 0.007843 0.596078 0.611765 0.627451 2 48.4375 29.2135 %_BS
%_0.431373 0.333333 0.317647 0.007843 0.596078 0.611765 0.627451 2 48.4375 29.2135 Bs
0.270588 0.207843 0.2 0 0.733333 0.737255 0.745098 2 50.7937 0.5618 %_BS
%_0.270588 0.207843 0.2 0 0.733333 0.737255 0.745098 2 50.7937 0.5618 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 79)
(Unnamed gradient 79) 0 3 Bd
[
<
14141414141414141414141414141414141414141414141414141414141414141414141414141414
1415151515151515151414151515
>
<
0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0E0E0E0E0F0F0F
101011121214151618191A1B1D1F
>
<
292929292929292929292929292929292929292929292929292B2B2A2A2A2A2B2B2B2C2C2C2D2D2E
2F2F3031323334363739393C3D3F
>
0
<
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAE9E9E9E9E9E9E9E9E9E9E8E8E8
>
<
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E6E6E6
E5E5E4E3E3E2E1E0DFDEDDDCDAD9
>
<
D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D5D5D5D5D5D5D4D4D4D3D3D3D2D2D1
D0D0CFCECDCCCBC9C8C6C5C3C1BF
>
4 %_Br
<
15151515151414151515151515151515151514141414141414141414141414141414141414141414
1414141414141414141414141414
>
<
1F1D1C1B1919191816151514141212111110100F0F0F0F0E0E0E0E0C0C0C0C0C0C0C0B0B0B0B0B0B
0B0B0B0B0B0B0B0B0B0B0B0B0B0B
>
<
3F3F3C3C3B3937373635343333323130302F2F2E2E2D2D2C2C2C2B2B2B2B2A2A2A2A2B2B29292929
2929292929292929292929292929
>
0
<
E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEA
>
<
D9DADBDCDDDEDEDFE0E1E1E2E2E3E3E4E4E5E5E6E6E6E6E7E7E7E7E8E8E8E8E8E8E8E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9
>
<
BFC0C2C3C4C6C7C8C9CACBCCCCCDCECFCFD0D0D1D1D2D2D3D3D3D4D4D4D4D5D5D5D5D5D5D6D6D6D6
D6D6D6D6D6D6D6D6D6D6D6D6D6D6
>
4 %_Br
[
0.082353 0.121569 0.247059 0 0.909804 0.85098 0.74902 2 50 100 %_BS
%_0.082353 0.121569 0.247059 0 0.909804 0.85098 0.74902 2 50 100 Bs
0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 87 50 %_BS
%_0.078431 0.043137 0.160784 0 0.917647 0.913725 0.839216 2 87 50 Bs
0.082353 0.121569 0.247059 0 0.909804 0.85098 0.74902 2 18.2927 0 %_BS
%_0.082353 0.121569 0.247059 0 0.909804 0.85098 0.74902 2 18.2927 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 82)
(Unnamed gradient 82) 1 2 Bd
[
<
2B2B2A2928272626252423222120201F1E1D1C1B1B1A19181716151413121211100F0E0D0C0C0B0A
090808060505040303020101
>
<
FAFAFBFBFBFBFCFCFCFCFCFDFDFDFDFEFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFEFEFDFDFDFEFEFE
FDFDFEFDFDFDFDFDFDFDFDFD
>
<
ECECECEFEFEFEFEFF2F2F2F1F1F3F4F4F4F4F7F7F7F7F7F9F9F9F9F9F9FBFBFBFAFAFBFBFAFAF9F8
F9F9F9F8F8F8F7F9F9F8F8F8
>
<
1110100F0E0D0D0C0B0A0A0908080706060505050504040403030302020202020101010101010101
010101000000000000000000
>
<
C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D4D5D6D7D8D9DADBDCDDDDDEDFE0E1E2E3E3E4E5
E6E7E7E8E9E9EAEBEBECEDED
>
<
27272626262625252525252424242423232323222222222121212121202020201F1F1F1F1F1E1E1E
1E1E1D1D1D1D1D1D1C1C1C1C
>
<
2D2D2D2C2C2C2C2C2B2B2B2B2B2A2A2A2A2A29292929292828282828282727272727262626262626
252525252525252424242424
>
4 %_Br
[
0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 2 44.5783 52.809 %_BS
%_0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 2 44.5783 52.809 Bs
0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 2 73.0769 100 %_BS
%_0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 2 73.0769 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 84)
(Unnamed gradient 84) 0 2 Bd
[
<
00000000000000000000000000000001010101010101020202020202030303030404040505050505
05060606070708080809090A0A0A0B0B0C0C0C0D0D0E0E0F0F101011111212131314141515161617
171819191A1A1B1B1C1D1D1E1E1F1F20222223242425252627272829292A2C2C2D2E2E2F30323233
343435363838393A3B3B3C3D3E3E40414242434445474748494A4B4B4D4E4F5050515253
>
<
00000000000000000000000000000000000000000101010101010101020202020202020303030303
03040405040405050505050606070707080809080A090A0A0A0B0B0C0B0C0C0D0D0E0E0F100F1110
12111212121413141415151517161718181919191B1A1C1C1C1D1E1E1F201F212221232423242627
2628292A292A2B2C2C2D2E2F2E30313231323335353536373839393A3B3C3D3E3E3F4041
>
<
00000000000000000000000000000000000001010101020201020202030303030303040404050406
060506060707080808080809090A0A0B0B0C0B0D0C0E0E0F10101111121313141415161516161719
18191A1A1B1C1C1C1E1E1F202021212222232526252728292A292A2C2D2C2E2F3032313234353637
3938393A3C3C3D3E3E3F404143444546484849494A4C4C4D4F5051525354555658595A5B
>
0
<
FFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFBFBFBFBFAFAFAFAF9F9F9F8F8F8F7F7
F7F6F6F6F5F5F4F4F4F3F3F2F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEAEAE9E9E8E8E7E7E6E6E5
E5E4E3E3E2E2E1E1E0DFDFDEDEDDDDDCDBDBDAD9D9D8D8D7D6D6D5D4D4D3D2D2D1D0D0CFCECDCDCC
CBCBCAC9C8C8C7C6C5C5C4C3C2C2C1C0BFBFBEBDBCBBBBBAB9B8B7B7B6B5B4B3B3B2B1B0
>
<
FFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFBFBFBFBFAFAFAF9F9F9F9F8F8F8F7F7
F7F6F6F5F5F5F4F4F4F3F3F2F2F1F1F1F0F0EFEFEEEEEDEDEDECECEBEBEAEAE9E9E8E8E7E6E6E5E5
E4E4E3E3E2E1E1E0E0DFDFDEDDDDDCDBDBDADAD9D8D8D7D6D6D5D4D4D3D2D2D1D0D0CFCECECDCCCB
CBCAC9C8C8C7C6C5C5C4C3C2C2C1C0BFBFBEBDBCBBBBBAB9B8B7B7B6B5B4B3B2B2B1B0AF
>
<
FFFFFFFFFFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F9F8F8F8F7F7F7F6F6F5
F5F5F4F4F3F3F2F2F2F1F1F0F0EFEFEEEEEDEDECECEBEAEAE9E9E8E8E7E6E6E5E5E4E3E3E2E2E1E0
E0DFDEDEDDDCDCDBDADAD9D8D7D7D6D5D5D4D3D2D2D1D0CFCECECDCCCBCBCAC9C8C7C7C6C5C4C3C2
C1C1C0BFBEBDBCBBBBBAB9B8B7B6B5B4B3B2B1B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1
>
4 %_Br
[
0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 2 50 49.9989 %_BS
%_0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 2 50 49.9989 Bs
0 0 0 0 1 1 1 2 65.8205 0 %_BS
%_0 0 0 0 1 1 1 2 65.8205 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(photo frames) Ln
0 A
u
u
*u
%AI3_Note:<< /operation /union >>0 O
0 J 0 j 1 w 4 M []0 d1 XR
120.6528 704.4785 m
299.6475 704.4785 l
301.1016 704.4785 302.2798 703.3008 302.2798 701.8467 c
302.2798 483.3691 l
302.2798 481.9146 301.1016 480.7358 299.6475 480.7358 c
120.6528 480.7358 l
119.1992 480.7358 118.0205 481.9146 118.0205 483.3691 c
118.0205 701.8467 l
118.0205 703.3008 119.1992 704.4785 120.6528 704.4785 c
Bb
1 (Unnamed gradient 79) 118.0205 592.6074 0 184.2593 1 0 0 1 0 0 Bg
184.2593 0 0 -227.7427 118.0205 706.4785 Xm
7910.2275 0 0 -227.7427 -7792.207 706.4785 Bc
92.1296 0 0 -227.7427 118.0205 706.4785 Bm
92.1296 0 0 -227.7427 210.1504 706.4785 Bm
7910.2275 0 0 -227.7427 302.2798 706.4785 Bc
f
0 BB
*U
*u
%AI3_Note:
0.231373 0.231373 0.333333 0 0.776471 0.729412 0.654902 Xa
0 XR
299.6475 480.4766 m
120.6528 480.4766 L
119.0586 480.4766 117.7612 481.7744 117.7612 483.3691 C
117.7612 701.8467 L
117.7612 703.4409 119.0586 704.7378 120.6528 704.7378 C
299.6475 704.7378 L
301.2417 704.7378 302.5391 703.4409 302.5391 701.8467 C
302.5391 483.3691 L
302.5391 481.7744 301.2417 480.4766 299.6475 480.4766 C
299.6475 480.4766 L
f
1 D
120.6528 704.2192 m
119.3442 704.2192 118.2798 703.1548 118.2798 701.8467 C
118.2798 483.3691 L
118.2798 482.0601 119.3442 480.9951 120.6528 480.9951 C
299.6475 480.9951 L
300.9561 480.9951 302.0205 482.0601 302.0205 483.3691 C
302.0205 701.8467 L
302.0205 703.1548 300.9561 704.2192 299.6475 704.2192 C
120.6528 704.2192 L
120.6528 704.2192 L
f
*U
U
*u
%AI3_Note:<< /operation /union >>0 D
0.733333 0.67451 0.658824 0.831373 0.062745 0.062745 0.062745 Xa
1 XR
132.1621 695.1567 m
288.126 695.1567 l
289.5786 695.1567 290.7568 693.979 290.7568 692.5249 c
290.7568 536.5625 l
290.7568 535.1084 289.5786 533.9321 288.126 533.9321 c
132.1621 533.9321 l
130.709 533.9321 129.5313 535.1084 129.5313 536.5625 c
129.5313 692.5249 l
129.5313 693.979 130.709 695.1567 132.1621 695.1567 c
f
*U
U
u
u
%AI3_Note:
1 Ap
0 XR
683.7256 21.4834 m
569.6025 21.3213 L
568.7725 607.7334 L
682.8984 607.8975 L
683.7256 21.4834 L
Bb
1 (Unnamed gradient 10) 568.5234 272.1719 0 115.0928 1 -0.0002 -0.0002 0.8378 1.8234 1292.088 Bg
115.0928 0.023019 -0.140822 -589.9047 568.7734 609.5503 Xm
8360.7305 1.67215 -0.140822 -589.9047 -7791.957 607.8779 Bc
57.5464 0.011509 -0.140822 -589.9047 568.7734 609.5503 Bm
57.5464 0.011509 -0.140822 -589.9047 626.3203 609.562 Bm
8360.7305 1.67215 -0.140822 -589.9047 683.8662 609.5732 Bc
f
0 BB
/BBAccumRotation (0.001413) XT
*u
0 Ap
0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 Xa
569.2002 20.918 m
569.2002 21.3203 L
568.3691 608.1357 L
683.3008 608.3008 L
683.3008 607.8979 L
684.1289 21.0811 L
683.7266 21.0811 L
569.2002 20.918 L
569.2002 20.918 L
f
1 D
569.1758 607.3311 m
570.0049 21.7246 L
683.3223 21.8857 L
682.4961 607.4941 L
569.1758 607.3311 L
569.1758 607.3311 L
f
*U
U
*u
%AI3_Note:<< /operation /union >>0 D
0.733333 0.67451 0.658824 0.831373 0.062745 0.062745 0.062745 Xa
1 XR
576.9727 600.7744 m
675.6865 600.7744 l
676.6064 600.7744 677.3535 600.0288 677.3535 599.1099 c
677.3535 500.3945 l
677.3535 499.4736 676.6064 498.7285 675.6865 498.7285 c
576.9727 498.7285 l
576.0527 498.7285 575.3066 499.4736 575.3066 500.3945 c
575.3066 599.1099 l
575.3066 600.0288 576.0527 600.7744 576.9727 600.7744 c
f
*U
*u
576.9727 490.2007 m
675.6865 490.2007 l
676.6064 490.2007 677.3535 489.4546 677.3535 488.5342 c
677.3535 389.8184 l
677.3535 388.9004 676.6064 388.1543 675.6865 388.1543 c
576.9727 388.1543 l
576.0527 388.1543 575.3066 388.9004 575.3066 389.8184 c
575.3066 488.5342 l
575.3066 489.4546 576.0527 490.2007 576.9727 490.2007 c
f
*U
*u
576.9727 379.627 m
675.6865 379.627 l
676.6064 379.627 677.3535 378.8799 677.3535 377.96 c
677.3535 279.2471 l
677.3535 278.3252 676.6064 277.5801 675.6865 277.5801 c
576.9727 277.5801 l
576.0527 277.5801 575.3066 278.3252 575.3066 279.2471 c
575.3066 377.96 l
575.3066 378.8799 576.0527 379.627 576.9727 379.627 c
f
*U
*u
576.9727 269.0508 m
675.6865 269.0508 l
676.6064 269.0508 677.3535 268.3057 677.3535 267.3848 c
677.3535 168.6699 l
677.3535 167.7529 676.6064 167.0059 675.6865 167.0059 c
576.9727 167.0059 l
576.0527 167.0059 575.3066 167.7529 575.3066 168.6699 c
575.3066 267.3848 l
575.3066 268.3057 576.0527 269.0508 576.9727 269.0508 c
f
*U
*u
576.9727 158.4785 m
675.6865 158.4785 l
676.6064 158.4785 677.3535 157.7324 677.3535 156.8125 c
677.3535 58.0967 l
677.3535 57.1787 676.6064 56.4326 675.6865 56.4326 c
576.9727 56.4326 l
576.0527 56.4326 575.3066 57.1787 575.3066 58.0967 c
575.3066 156.8125 l
575.3066 157.7324 576.0527 158.4785 576.9727 158.4785 c
f
*U
U
u
u
%AI3_Note:
302.2798 240.4375 m
302.2798 428.9849 L
302.2798 430.4385 301.1011 431.6177 299.6475 431.6177 C
120.6528 431.6177 L
119.1987 431.6177 118.0205 430.4385 118.0205 428.9849 C
118.0205 210.5078 L
118.0205 209.0527 119.1987 207.876 120.6528 207.876 C
262.4736 207.876 L
302.2798 240.4375 L
Bb
1 (Unnamed gradient 10) 118.0205 319.7471 0 184.2593 1 0 0 1 0 0 Bg
184.2593 0 0 -227.7417 118.0205 433.6177 Xm
7910.2275 0 0 -227.7417 -7792.207 433.6177 Bc
92.1296 0 0 -227.7417 118.0205 433.6177 Bm
92.1296 0 0 -227.7417 210.1504 433.6177 Bm
7910.2275 0 0 -227.7417 302.2798 433.6177 Bc
f
0 BB
*u
0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 Xa
0 XR
262.6123 207.4873 m
120.6528 207.4873 L
118.9868 207.4873 117.6318 208.8418 117.6318 210.5078 C
117.6318 428.9849 L
117.6318 430.6509 118.9868 432.0063 120.6528 432.0063 C
299.6475 432.0063 L
301.3135 432.0063 302.6685 430.6509 302.6685 428.9849 C
302.6685 240.2529 L
302.5259 240.1367 L
262.6123 207.4873 L
262.6123 207.4873 L
f
1 D
120.6528 431.229 m
119.4155 431.229 118.4092 430.2222 118.4092 428.9849 C
118.4092 210.5078 L
118.4092 209.2715 119.4155 208.2646 120.6528 208.2646 C
262.335 208.2646 L
301.8911 240.6221 L
301.8911 428.9849 L
301.8911 430.2222 300.8848 431.229 299.6475 431.229 C
120.6528 431.229 L
120.6528 431.229 L
f
*U
U
*u
%AI3_Note:<< /operation /union >>0 D
0.733333 0.67451 0.658824 0.831373 0.062745 0.062745 0.062745 Xa
1 XR
132.1621 422.2959 m
288.125 422.2959 l
289.5786 422.2959 290.7578 421.1172 290.7578 419.6631 c
290.7578 263.7021 l
290.7578 262.248 289.5786 261.0703 288.125 261.0703 c
132.1621 261.0703 l
130.7075 261.0703 129.5308 262.248 129.5308 263.7021 c
129.5308 419.6631 l
129.5308 421.1172 130.7075 422.2959 132.1621 422.2959 c
f
*U
u
%AI3_Note:
0 XR
299.6475 431.6177 m
120.6528 431.6177 L
119.1987 431.6177 118.0205 430.4385 118.0205 428.9849 C
118.0205 210.5078 L
118.0205 209.0527 119.1987 207.876 120.6528 207.876 C
258.8442 207.876 L
258.8442 234.1758 L
258.8442 235.6309 260.0234 236.8086 261.4766 236.8086 C
297.8438 236.8086 L
302.2798 240.4375 L
302.2798 428.9849 L
302.2798 430.4385 301.1011 431.6177 299.6475 431.6177 C
n
0 O
0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 Xa
258.8442 234.1758 m
258.8442 207.876 L
262.4736 207.876 L
297.8438 236.8086 L
261.4766 236.8086 L
260.0234 236.8086 258.8442 235.6309 258.8442 234.1758 C
f
U
1 XR
302.2798 240.4375 m
265.106 240.4375 L
263.6523 240.4375 262.4736 239.2588 262.4736 237.8066 C
262.4736 207.876 L
302.2798 240.4375 L
Bb
1 (Unnamed gradient 84) 266.8423 243.042 -50.5599 41.619 1 0 0 1 0 0 Bg
26.4394 -32.1419 -42.8059 -35.2113 288.2451 260.6475 Xm
5119.6914 -6223.9282 -42.8059 -35.2113 -4831.4463 6484.5757 Bc
13.2194 -16.0706 -42.8059 -35.2113 288.2451 260.6475 Bm
5119.6914 -6223.9282 -42.8059 -35.2113 301.4644 244.5771 Bc
f
0 BB
U
u
u
*u
%AI3_Note:<< /operation /union >>356.478 704.4785 m
535.4727 704.4785 l
536.9268 704.4785 538.1055 703.3008 538.1055 701.8467 c
538.1055 483.3691 l
538.1055 481.9146 536.9268 480.7358 535.4727 480.7358 c
356.478 480.7358 l
355.0234 480.7358 353.8457 481.9146 353.8457 483.3691 c
353.8457 701.8467 l
353.8457 703.3008 355.0234 704.4785 356.478 704.4785 c
Bb
1 (Unnamed gradient 10) 353.8457 592.6074 0 184.2598 1 0 0 1 0 0 Bg
184.2598 0 0 -227.7427 353.8457 706.4785 Xm
8146.0532 0 0 -227.7427 -7792.2075 706.4785 Bc
92.1299 0 0 -227.7427 353.8457 706.4785 Bm
92.1299 0 0 -227.7427 445.9756 706.4785 Bm
8146.0532 0 0 -227.7427 538.1055 706.4785 Bc
f
0 BB
*U
*u
%AI3_Note:
0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 Xa
0 XR
535.4727 480.3472 m
356.478 480.3472 L
354.812 480.3472 353.457 481.7026 353.457 483.3691 C
353.457 701.8467 L
353.457 703.5122 354.812 704.8672 356.478 704.8672 C
535.4727 704.8672 L
537.1387 704.8672 538.4941 703.5122 538.4941 701.8467 C
538.4941 483.3691 L
538.4941 481.7026 537.1387 480.3472 535.4727 480.3472 C
535.4727 480.3472 L
f
1 D
356.478 704.0898 m
355.2407 704.0898 354.2344 703.0835 354.2344 701.8467 C
354.2344 483.3691 L
354.2344 482.1313 355.2407 481.1245 356.478 481.1245 C
535.4727 481.1245 L
536.71 481.1245 537.7168 482.1313 537.7168 483.3691 C
537.7168 701.8467 L
537.7168 703.0835 536.71 704.0898 535.4727 704.0898 C
356.478 704.0898 L
356.478 704.0898 L
f
*U
U
*u
%AI3_Note:<< /operation /union >>0 D
0.733333 0.67451 0.658824 0.831373 0.062745 0.062745 0.062745 Xa
1 XR
367.9863 695.1567 m
523.9512 695.1567 l
525.4043 695.1567 526.582 693.979 526.582 692.5249 c
526.582 536.5625 l
526.582 535.1084 525.4043 533.9321 523.9512 533.9321 c
367.9863 533.9321 l
366.5332 533.9321 365.3555 535.1084 365.3555 536.5625 c
365.3555 692.5249 l
365.3555 693.979 366.5332 695.1567 367.9863 695.1567 c
f
*U
u
%AI3_Note:
0.098039 0.082353 0.247059 0 0.898039 0.87451 0.764706 Xa
0 XR
396.126 525.8306 m
391.9966 526.1934 393.4766 521.5234 389.5845 522.4336 C
390.2959 524.0732 388.5518 525.7397 387.2554 526.0469 C
385.8574 525.2217 384.4229 526.104 383.2969 526.2017 C
382.5776 526.6465 382.9473 528.6943 384.4517 528.5625 C
387.7036 524.6807 393.0454 529.5049 396.126 525.8306 C
f
398.4746 515.9756 m
396.3906 515.9692 397.6792 519.8286 395.5322 519.0718 C
396.6519 521.0522 396.6558 518.9736 398.5332 518.8086 C
397.3101 517.7769 L
398.4746 515.9756 L
f
382.4839 523.4385 m
381.1543 523.3643 378.252 524.7559 378.4497 527.0078 C
378.2773 527.2144 378.7524 528.3081 377.9683 527.9971 C
379.0303 527.1494 382.373 526.4756 382.4839 523.4385 C
f
387.1177 513.7598 m
386.3325 513.4502 385.5835 513.5176 384.457 513.6162 C
385.2422 513.9253 386.2612 514.7813 387.1177 513.7598 C
f
380.2427 519.4746 m
380.2837 517.7686 379.085 519.2012 378.71 519.2314 C
378.0215 520.0498 L
378.8086 520.355 379.7632 520.4639 380.2427 519.4746 C
f
369.6499 525.894 m
367.8398 526.8096 371.896 527.7739 369.6787 528.3525 C
371.0073 528.4209 L
371.1504 525.7622 L
369.6499 525.894 L
f
367.0503 528.5806 m
366.4346 528.0674 365.8555 527.9307 364.9673 528.5757 C
365.6138 529.4653 L
366.0186 529.8076 366.2983 528.647 367.0503 528.5806 C
f
368.7715 522.374 m
367.7827 521.895 368.0859 523.1919 367.5723 523.8057 C
368.0156 524.5225 369.7246 522.4824 368.7715 522.374 c
f
357.6553 507.8438 m
358.7734 509.8267 360.3496 508.3652 362.0874 508.7793 C
360.3496 508.3652 359.498 507.3037 357.6553 507.8438 C
f
U
u
409.0859 498.105 m
409.5957 498.9248 410.7148 499.252 410.6924 497.8608 C
410.7148 499.252 410.7148 499.252 411.4775 500.2471 C
411.4619 499.3174 412.1465 499.5698 412.582 499.647 C
412.2227 500.3101 411.7295 500.4209 410.7402 500.6465 C
409.8379 498.6353 407.9697 501.6802 407.127 499.4829 C
407.7363 498.9951 408.334 497.5771 409.0859 498.105 C
f
413.1348 492.0024 m
413.2676 492.5562 L
411.7051 491.6865 L
412.0215 492.1367 413.084 492.6563 413.1348 492.0024 C
f
418.1797 493.4858 m
418.04 492.4692 418.835 491.8813 418.8193 490.9502 C
418.7891 492.9961 420.0674 491.3677 420.751 491.6226 C
421.0264 493.1899 L
420.3623 494.3296 418.6816 493.8379 417.2598 493.9844 C
418.1797 493.4858 L
f
419.4629 492.3188 m
419.9111 493.3262 L
419.5361 493.0605 418.668 492.9082 419.4629 492.3188 C
f
418.501 497.8433 m
417.3877 497.9785 419.1709 497.1685 418.0508 496.8374 C
418.4277 497.1025 418.8613 497.1777 418.501 497.8433 C
f
423.1582 494.689 m
420.7891 493.9419 L
421.7705 493.2554 L
423.1582 494.689 L
f
423.2881 491.3403 m
422.9775 491.3491 422.4922 491.9258 422.9346 492.4692 C
423.7803 491.2261 424.3057 492.9736 425.0947 491.9194 C
424.3408 491.3926 L
424.4453 490.0854 425.9141 492.7251 425.876 490.4033 C
426.8936 492.0376 425.1016 492.3843 426.4238 493.5435 C
425.1777 493.1255 424.2549 493.625 423.209 494.0366 C
423.5127 493.5625 423.6367 493.6499 424.0625 493.2607 C
423.3193 493.1948 422.3145 492.4907 421.4453 492.3364 C
421.915 490.832 422.5586 492.2017 423.2881 491.3403 C
f
427.0625 491.0103 m
427.8662 490.8843 429.1045 490.8379 429.3184 492.5981 C
428.4736 493.8379 428.3242 492.3564 427.9414 491.625 C
427.6982 491.9141 426.8936 492.0376 427.2197 492.957 C
427.3379 492.5796 426.7012 491.6748 427.0625 491.0103 C
f
430.2168 490.7021 m
430.8027 492.2632 L
430.4258 491.9985 L
430.3818 493.1143 L
430.3135 492.8364 430.0332 490.8037 429.2295 490.9272 C
429.6494 490.0752 429.791 491.0923 430.2168 490.7021 C
f
430.4102 498.4121 m
430.9551 497.6465 431.2734 498.1011 431.8984 498.5425 C
431.0264 498.3882 429.791 498.4351 429.5313 497.7964 C
429.5986 498.0718 L
428.7793 497.2661 428.2012 496.1714 V
429.0879 497.2529 430.6719 495.6152 430.4102 498.4121 C
f
429.2969 498.5469 m
429.9326 499.4521 L
429.2969 498.5469 L
f
432.7021 491.0747 m
431.4727 491.584 L
431.7734 491.1079 L
432.7021 491.0747 L
f
431.2324 495.7773 m
432.2207 495.5547 430.6953 497.0068 431.623 496.9722 C
431.875 497.1484 430.2607 496.9292 430.1865 496.1895 C
430.4277 495.9028 431.1318 497.0825 431.2324 495.7773 C
f
433.5059 490.9502 m
434.5166 492.1211 L
433.5059 490.9502 L
f
436.0342 490.2031 m
436.2344 491.0356 L
437.2129 490.3452 438.5371 491.5063 439.249 489.7104 C
439.0811 490.7407 439.6553 491.8335 438.7939 492.1426 C
438.6621 491.5913 438.3525 491.6025 438.4014 490.9502 C
438.0332 491.1499 438.1084 491.8906 437.8643 492.1821 C
437.2305 491.2739 436.25 491.9614 435.7402 491.1445 C
435.9912 491.3213 436.0508 491.1333 436.2344 491.0356 C
435.1572 489.5859 434.9707 493.1255 434.4951 490.7251 C
434.877 491.4561 435.5322 489.8521 436.0342 490.2031 C
f
435.9482 495.8774 m
435.082 496.1895 L
435.3496 497.2944 436.1377 496.2441 436.2793 497.2607 C
436.2266 497.915 435.3652 498.2236 435.6807 498.6768 C
435.5762 496.0786 434.501 498.5361 434.9482 495.6382 C
433.8271 495.3066 434.6035 497.2305 433.4248 497.0879 C
433.0898 495.7065 L
434.4063 496.4014 434.6318 495.1836 435.9482 495.8774 C
f
439.2852 495.4717 m
439.7041 494.6191 L
439.4746 495.8379 L
441.4014 496.0439 442.5322 491.0474 443.6953 491.75 C
445.1494 493.3965 446.5 490.9473 447.9834 491.1982 C
448.7061 492.2549 447.29 491.8193 447.2129 492.4663 C
447.4199 494.5229 447.917 491.3809 448.2529 493.0698 C
448.3496 494.5625 446.7363 494.6777 446.0986 495.5757 C
445.5459 495.3652 445.5537 494.9033 445.3848 494.0562 C
445.2441 494.8887 444.6826 495.1421 444.5391 495.9731 C
443.3848 494.8042 442.7803 497.0127 441.6445 495.7539 C
441.292 496.8823 442.4951 495.9731 442.1201 496.1426 c
441.5 496.1152 L
441.5654 495.9307 L
440.7236 494.7778 439.166 495.8481 438.6221 496.6128 C
439.0488 496.2246 439.3438 495.2866 438.8418 494.9307 C
438.4297 496.2505 L
437.3447 494.3359 L
438.1709 495.6084 439.1221 493.0605 439.2852 495.4717 C
f
438.085 497.8433 m
436.793 498.5425 438.2383 495.8828 436.8223 496.4937 C
438.3125 496.6245 L
438.085 497.8433 L
f
444.2568 494.5649 m
444.8965 493.665 L
444.5498 495.5083 443.5459 493.0459 444.2568 494.5649 C
f
446.6123 494.5791 m
446.2754 492.8877 L
446.877 493.8467 L
446.6123 494.5791 L
f
448.7617 492.5366 m
449.2422 493.3965 448.6689 494.1128 448.1133 493.9004 C
448.6123 493.832 448.875 493.0981 448.7617 492.5366 C
f
452.3008 489.2813 m
451.2188 489.2773 453.2598 488.8599 452.4834 487.3394 C
452.624 488.0591 453.1699 489.0181 452.3008 489.2813 C
f
455.8018 485.2773 m
455.4111 484.9551 455.2529 485.2559 455.1973 485.665 C
455.4834 485.6323 455.71 485.5366 455.8018 485.2773 C
f
442.3027 490.5083 m
442.1787 490.5005 442.0459 490.5 441.9238 490.5532 C
442.0527 490.5435 442.1748 490.5229 442.3027 490.5083 C
f
442.5498 490.4771 m
442.4688 490.4883 442.3848 490.5 442.3027 490.5083 C
442.3936 490.5137 442.4785 490.5 442.5498 490.4771 C
f
450.5859 486.8521 m
450.583 486.8521 450.583 486.8521 450.582 486.8511 C
450.5547 486.9077 450.5264 486.9424 450.4961 487.0127 C
450.5859 486.8521 L
f
416.2832 491.2324 m
416.0723 491.1445 415.9111 491.1177 415.7803 491.1318 C
415.9463 491.1689 416.1123 491.2012 416.2783 491.2446 C
416.2813 491.2407 416.2813 491.2393 416.2832 491.2324 C
f
415.7002 493.5786 m
416.5879 494.6602 416.6504 491.0356 418.0898 491.814 C
417.5107 491.5806 416.9014 491.4014 416.2783 491.2446 C
415.4531 492.9307 416.916 492.1416 415.7002 493.5786 C
f
427.71 495.582 m
427.7256 495.6045 427.7422 495.6045 427.7598 495.6323 C
427.8467 495.6904 427.8018 495.6348 427.71 495.582 C
f
376.6294 491.8076 m
376.6201 491.3423 L
375.8262 491.9341 L
376.6294 491.8076 L
f
376.7393 490.9678 m
378.0879 490.0786 L
370.0938 489.8096 L
370.3525 490.4526 L
370.2427 491.2954 376.9751 490.2168 376.7393 490.9678 C
f
377.1235 491.6973 m
377.8999 493.6191 378.4136 490.9966 379.3647 492.3564 c
378.73 491.4497 378.2788 490.4443 377.6665 490.9336 C
377.1235 491.6973 L
f
u
379.7881 495.4063 m
380.2163 495.02 380.7256 495.8379 380.9678 495.5483 C
380.8198 494.0669 380.1558 495.207 379.7881 495.4063 C
f
U
380.937 501.0342 m
381.0044 501.064 381.0698 501.062 381.1353 501.0464 C
381.0566 500.9541 380.9863 500.8623 380.9321 500.771 C
380.937 501.0342 L
f
380.9321 500.771 m
380.9219 500.1055 L
380.7822 500.3633 380.8208 500.5737 380.9321 500.771 C
f
381.1353 501.0464 m
381.312 501.2612 381.521 501.4795 381.6299 501.7524 C
381.4463 501.8525 L
381.6982 502.0293 382.1401 502.5688 382.2593 502.1919 C
381.7637 502.3052 381.7568 501.8413 381.7417 500.9106 C
382.5449 500.7866 L
382.3931 498.5752 381.8511 500.9048 381.1353 501.0464 C
f
u
383.6719 501.5815 m
382.8457 500.3101 L
382.6191 501.5288 383.3633 501.5928 383.6719 501.5815 C
f
U
384.8887 500.1416 m
384.6968 499.7759 383.8931 499.9004 384.3794 499.3223 C
384.2476 499.0737 384.0913 499.1245 383.9272 499.1299 C
384.4692 499.4341 383.959 500.9243 384.8887 500.1416 C
f
383.9272 499.1299 m
383.8618 499.0962 383.79 499.0664 383.6934 499.0693 C
383.772 499.1245 383.8511 499.1338 383.9272 499.1299 C
f
u
375.2974 493.625 m
375.3965 493.4531 375.3936 493.2944 375.3496 493.1406 C
375.2974 493.625 L
f
U
386.5386 498.7773 m
386.8477 498.7642 L
386.7593 498.7666 386.6772 498.7358 386.5986 498.7021 C
386.5386 498.7773 L
f
360.8696 487.0132 m
361.9502 486.6289 362.9736 486.2129 364.5313 487.0479 C
364.4956 488.6309 365.1592 487.4893 365.2485 489.1592 C
363.6338 488.9409 371.334 490.1509 370.0449 490.8516 C
369.6597 490.1201 L
370.0596 491.7798 L
370.8335 491.3594 371.8921 490.0376 372.4189 490.9897 C
372.563 490.4702 365.8198 490.8989 366.0762 490.4297 C
365.4785 492.3447 375.1016 492.2832 375.3496 493.1406 C
375.457 492.1309 L
376.6538 493.2012 377.4204 494.6602 378.4253 495.3652 C
378.6538 494.1479 L
377.916 494.5479 377.7148 493.7192 376.9619 493.1899 C
378.2661 493.418 378.5034 492.6655 379.4976 492.9082 C
379.4634 494.4888 378.6436 493.6821 379.897 494.5654 C
380.2588 493.9004 379.4248 492.168 380.5449 492.4961 C
381.9014 492.0718 381.6299 494.4067 382.8105 494.5479 C
382.0156 495.1367 L
382.4502 495.2134 383.2627 495.5547 383.6812 494.7036 C
383.188 494.813 381.9331 493.9316 381.9673 492.3477 C
382.4688 492.7026 383.5752 492.1025 384.0107 492.1782 C
383.7441 491.0747 L
384.2222 490.0322 384.4961 491.6025 385.0996 490.6494 C
385.6699 491.2798 384.7549 492.2441 385.0728 492.6973 C
385.1904 492.3188 386.2944 491.7236 386.6787 492.4492 C
386.4097 494.7847 385.3672 491.7563 384.6606 494.0156 C
385.708 493.6035 L
386.3657 495.9028 384.0337 493.5723 384.374 495.4175 C
385.1597 497.8066 386.0107 493.1255 386.7402 496.1665 C
386.2563 496.7417 384.7075 496.8013 384.9067 497.6323 C
385.4531 496.7686 385.8438 498.4082 386.5986 498.7021 C
387.5112 497.625 L
387.8955 498.3535 387.5854 498.3652 387.2832 498.8394 C
388.6245 497.4917 390.8804 499.0762 392.7764 497.4233 C
393.896 497.7539 392.9165 498.4409 393.4272 499.2583 C
394.0229 497.8433 395.0322 499.0098 395.6509 498.9893 C
395.835 498.8887 396.1704 500.2686 395.9932 500.8345 C
394.4307 499.9648 L
394.5044 500.7051 394.2759 501.9219 393.7163 501.7588 C
394.1025 499.0464 391.5146 503.4219 391.3999 500.3579 C
391.4219 501.7524 L
389.4243 500.8032 L
389.4824 500.6177 L
389.4902 501.0791 387.7925 499.6572 386.6865 500.2583 C
387.0049 500.7114 388.8545 500.1743 387.7661 501.7051 C
388.5835 502.5093 390.0508 501.2451 391.5464 501.8413 C
391.2549 502.7817 L
392.8276 504.1143 394.9043 502.3628 396.644 502.668 C
396.126 501.3867 L
396.7383 500.8989 397.5259 499.8462 398.1016 500.9399 C
397.3569 500.876 397.7417 501.6045 397.8745 502.1577 C
398.8784 502.8618 400.3516 502.063 401.7241 502.5688 C
401.6572 502.2925 401.7153 502.1021 V
403.1543 502.8867 L
403.835 502.6748 404.0674 501.9219 404.4873 501.0688 C
404.7383 501.2451 405.3574 501.2227 405.123 501.9761 C
404.9902 502.0493 404.8564 502.1196 404.7676 502.0444 C
405.4941 503.4521 405.2754 501.6323 406.1836 502.4912 C
405.4824 501.312 406.4043 500.8096 406.3213 499.605 C
407.3848 500.1226 406.4199 501.7397 406.5527 502.2925 C
407.8438 501.5942 408.0107 500.564 409.3086 500.3291 C
409.3838 501.0688 408.3867 500.8296 408.2793 501.6689 C
408.6484 501.4683 409.0811 501.5444 409.1484 501.8218 C
408.3535 502.4102 L
409.7012 501.5215 410.998 501.2881 412.4961 501.8828 C
412.3789 502.2578 L
413.3066 502.2227 L
412.9727 500.8413 L
413.4756 501.1929 414.0127 499.9648 414.2813 501.0688 C
414.0967 501.1709 L
414.7236 501.6094 L
414.0781 500.2402 L
414.876 499.6519 415.9766 502.4912 417.2725 502.2578 C
417.5547 500.3882 415.0342 501.6011 414.8672 499.187 C
415.2949 498.8003 416.0303 498.4009 416.291 499.04 C
416.2402 499.6943 415.9307 499.7061 415.6191 499.7158 C
416.7568 500.9756 418.458 498.959 419.1768 501.0688 C
418.3203 501.8457 L
419.3164 502.0884 419.9561 499.5537 420.2891 500.9346 C
419.5068 498.5469 L
420.5156 499.7158 421.8135 499.4829 422.7578 500.376 C
422.7822 501.7666 421.3936 500.3354 421.46 500.6128 C
421.9102 501.6162 L
423.3848 500.8184 422.3311 500.7651 424.1152 499.9541 C
424.1328 500.8838 L
424.7256 499.4653 426.3203 502.1919 425.7207 499.7061 C
425.2354 500.2793 L
425.2783 499.1646 L
427.3379 499.9253 L
427.1377 499.0933 428.1318 499.335 427.8662 498.2295 C
428.626 499.2236 L
428.9707 497.6323 427.2305 497.3252 427.1484 496.1191 C
427.1758 495.3901 427.5342 495.4805 427.71 495.582 C
426.793 494.4063 426.3418 497.1714 425.4316 497.207 C
424.9795 496.2012 L
425.0039 497.5933 L
424.6279 497.3311 424.3027 496.4131 424.1699 495.8604 C
423.2715 497.7539 422.3047 495.4639 420.9473 495.8887 C
422.0742 496.6831 420.2266 497.2192 420.417 497.5835 C
419.7998 497.6069 418.2695 495.1533 417.7432 496.8496 C
417.3799 497.5132 418.501 497.8433 417.6387 498.1528 C
417.0781 497.9873 416.6934 497.2607 417.0547 496.5947 C
415.8086 496.1792 414.3262 496.5117 412.9648 496.4722 C
413.2881 497.3901 L
412.4336 498.165 411.6055 496.896 411.1563 495.8887 C
411.0391 496.2666 410.9707 495.9897 411.1035 496.5376 C
410.0137 498.0718 409.708 494.644 407.9189 494.9907 C
408.0195 493.6841 408.8242 493.5625 409.3896 494.1904 C
409.2402 492.709 L
410.791 492.6504 412.5313 492.957 413.7852 493.8379 C
413.209 492.7446 L
414.293 490.751 413.9863 494.666 415.001 492.395 C
415.7559 492.9253 414.4561 493.1621 415.0254 493.7891 C
415.5576 493.3647 414.8877 491.2236 415.7803 491.1318 C
412.4316 490.3843 408.6172 490.5029 405.1113 490.2622 C
405.0439 489.9878 405.2285 489.8867 405.4121 489.7861 C
404.2031 487.7881 394.4443 493.165 394.1294 489.2686 C
393.9536 489.8374 394.5225 490.4668 393.7773 490.3994 C
393.709 490.1226 393.5186 489.7583 393.6938 489.1958 C
391.8101 491.3115 389.2925 489.083 387.0229 490.4702 C
387.0737 489.8184 386.5737 489.4634 386.5645 489 C
385.7852 490.5186 384.4561 488.8936 383.7271 489.7583 C
383.9629 489.0044 L
381.6685 489 L
381.6011 488.7212 381.9116 488.7124 382.0962 488.6118 C
381.5947 488.2568 381.4834 489.1006 381.4346 489.751 C
380.4141 488.1201 L
377.4243 490.832 373.6963 486.6064 370.2554 488.3198 C
369.7373 487.0371 369.2959 486.4956 368.4243 486.3423 C
368.8516 485.9541 L
367.9648 484.8721 368.7998 486.6064 368.0469 486.0776 C
367.5371 485.2588 367.8906 484.1309 368.5854 484.8491 C
369.0186 484.4106 368.752 483.9653 368.4399 483.6509 C
365.6797 483.7847 363.1069 484.6523 360.8696 487.0132 C
f
465.4307 482.1206 m
465.1328 482.7256 466.6182 482.6523 465.8906 483.9536 C
463.582 486.4727 459.8262 484.4614 457.0898 486.4429 C
456.3594 487.4258 456.1641 487.4497 455.5068 487.9785 C
455.4941 487.7646 455.4941 487.4922 455.5225 487.2544 C
454.7793 487.3433 453.5723 486.9688 452.8281 487.5962 C
452.6172 487.3276 452.4609 486.3174 452.8662 486.5591 C
451.7334 485.6748 450.9131 488.4385 450.2744 487.6387 C
450.8242 486.9736 449.7275 486.6792 450.3838 486.1479 C
449.1973 486.0103 449.3037 489.5762 448.3643 489.9985 C
448.3105 489.7173 448.252 489.4346 448.4414 489.3506 C
447.418 490.8857 445.2979 488.4658 445.1836 490.9727 C
444.7725 489.9277 L
444.3223 490.7485 444.4326 491.3086 443.6846 491.6494 C
443.1953 491.2549 443.7021 490.7197 443.5244 490.3389 C
443.3174 491.3501 442.0078 490.8965 441.4102 492.3174 C
441.374 493.897 442.4736 490.1997 443.0654 491.6206 C
443.084 491.9341 442.998 492.0273 442.877 492.0635 C
445.9854 491.6777 448.3516 487.2544 450.9092 488.4385 C
451.4697 487.3252 451.9014 488.3643 452.1494 489.4551 C
451.6914 489.959 450.374 491.0171 450.3428 488.8091 C
449.543 490.2407 L
449.2422 490.1328 449.248 492.3638 449.1172 492.7314 C
449.6807 492.4756 450.3184 494.644 449.5576 495.4438 C
451.041 495.6978 449.0801 490.7485 450.3926 491.3115 C
450.5859 492.9082 L
450.3369 492.0552 451.4736 491.314 451.8975 491.8491 C
451.7227 492.168 L
455.2168 491.4102 459.8799 492.1221 463.7451 492.6465 C
464.6943 488.6826 466.5801 494.0415 467.4727 490.8242 C
467.8984 491.3594 466.8672 492.2319 467.6846 492.7153 c
468.0918 492.957 468.1309 491.9189 468.1104 491.625 C
468.2334 491.7266 468.3584 491.8335 468.4844 491.9399 C
468.7822 488.0889 468.0674 484.6626 465.4307 482.1206 C
f
U
u
*u
1 D
0.152941 0.141176 0.309804 0 0.847059 0.811765 0.698039 Xa
486.6523 700.5723 m
486.5869 700.6143 486.4893 700.6382 486.3818 700.6572 C
486.8467 700.7153 486.3145 701.0034 486.9082 700.9497 C
486.6279 700.999 486.3779 701.0625 486.1035 701.1113 C
486.126 701.208 486.3418 701.2109 486.3633 701.3062 C
485.873 701.269 485.7803 701.1396 485.4746 701.3257 C
485.4961 701.4365 485.8066 701.332 485.8311 701.2905 C
485.9971 701.2993 485.8896 701.4458 486.0938 701.4365 C
485.9814 701.4819 485.8467 701.4731 485.7363 701.5181 C
485.7158 701.7227 485.9854 701.5391 486.0908 701.5293 C
486.1191 701.5977 486.1787 701.6294 486.4414 701.6792 C
486.2021 701.752 486.4238 701.8145 486.082 701.854 C
486.1855 701.9976 486.4209 701.832 486.5264 701.8213 C
486.335 702.0269 486.0635 702.189 485.626 702.2578 C
485.6865 702.3428 485.7861 702.2686 485.8916 702.2661 C
486.0508 702.4629 485.2402 702.5171 485.7051 702.5854 C
485.4551 702.6797 485.2852 702.6797 485.0781 702.7056 C
485.1016 702.8022 485.3232 702.644 485.3418 702.8057 C
485.0508 702.7949 485.0938 702.8472 484.8066 702.9292 C
484.6045 702.897 484.916 702.8599 484.7207 702.7871 C
484.4717 702.7813 484.9277 702.9199 484.54 702.8745 C
484.5596 702.9263 484.7158 702.9116 484.7158 702.9731 C
484.7295 702.9966 484.21 703.0068 484.623 703.062 C
484.5195 703.1421 483.9824 703.0815 484.2637 703.2373 C
483.9824 703.1045 483.9463 703.3398 483.6406 703.2183 C
483.7979 703.561 483.6621 704.0117 483.1689 704.1328 C
483.5137 704.2183 483.4102 704.4111 483.877 704.293 C
483.8604 704.3931 483.6494 704.3867 483.4307 704.3716 C
483.6621 704.4868 483.1875 704.4883 483.4229 704.604 c
483.3438 704.5649 483.2236 704.5479 483.0664 704.5469 C
483.166 704.6382 483.3926 704.7344 483.6807 704.8428 C
483.6543 704.9517 483.2881 704.8599 483.3301 704.7861 C
483.2305 704.873 483.1514 704.9702 482.79 704.9097 C
483.0029 705.1069 483.3018 704.9854 483.6748 705.0747 C
482.9248 705.1694 482.457 705.4922 482.4121 705.7329 C
482.4961 705.8984 482.5625 705.8223 482.7617 705.8823 C
482.749 706.0005 482.4287 705.9473 482.3145 706.0078 C
482.4941 706.2212 482.2783 706.3491 482.5674 706.4805 C
482.333 706.5073 482.2627 706.6216 482.0303 706.6484 C
482.6807 706.9019 482.9102 707.2554 483.1543 707.6094 C
482.7285 707.4883 483.1836 707.7227 482.8809 707.8804 C
483.041 707.8906 483.0684 707.8296 483.2373 707.8452 C
482.9629 707.9448 483.2002 707.8706 483.2324 708.0293 C
483.2158 708.0825 483.0674 708.064 482.9639 708.0679 C
482.9434 708.416 483.2207 708.832 482.8438 709.1768 C
483.2949 709.2485 482.7148 709.54 483.0039 709.6914 C
482.9268 709.7598 482.8711 709.6758 482.6484 709.728 C
482.8809 709.8418 482.4102 709.8442 482.6436 709.959 C
482.1807 709.8408 482.5918 709.9307 482.0186 709.9873 C
481.9238 710.1484 481.8613 710.4639 482.3574 710.5527 C
482.0879 710.5889 482.2783 710.7954 482.4355 710.8809 C
482.1104 711.0469 482.0576 711.6382 482.3242 711.7114 C
482.2383 711.8862 481.8291 711.6582 481.874 711.8379 C
482.1855 712.0078 482.0752 712.4551 482.1074 712.9565 C
481.6553 712.9692 482.1104 712.7935 481.7559 712.8086 C
481.7539 713.0098 481.6191 713.0171 481.8359 713.1357 C
482.1357 713.1255 481.6045 712.9487 482.0186 713.0015 C
482.0088 713.291 482.8203 713.5884 482.4385 713.8018 C
482.4863 713.9155 482.7705 713.9146 482.9668 713.957 C
482.6973 714.2139 483.126 714.4214 483.3926 714.6177 C
483.3887 714.6631 483.2832 714.6514 483.2119 714.6587 C
483.6602 715.0576 482.8232 715.1929 482.6504 715.6621 C
482.6895 715.8877 483.0625 715.9502 483.3496 716.0542 C
483.2871 716.144 483.0771 716.1528 482.9902 716.2295 C
483.0117 716.3237 483.165 716.3579 483.25 716.4219 C
483.1016 716.5537 482.9688 716.4326 482.8027 716.5024 C
482.7344 716.7441 483.0908 716.8691 483.4082 717.1221 C
483.1563 717.3037 483.3389 717.5425 482.8643 717.4312 C
482.9805 717.5117 483.0859 717.5977 483.3018 717.6299 C
483.4307 717.8086 482.5586 717.8291 483.0283 717.8984 C
482.9199 717.9087 482.6689 718.0654 482.6699 717.9814 C
482.4316 718.2573 483.0977 718.686 482.8164 719.0059 c
482.7256 719.1118 482.5068 719.1465 482.1924 719.1265 C
482.5625 719.2842 482.6113 719.5801 482.709 719.6519 c
482.7568 719.686 482.9063 719.6299 482.8896 719.6113 c
483 719.729 482.8281 719.9473 483.2295 720.1318 C
482.957 720.0483 482.8867 720.0811 482.6992 720.0229 C
482.4248 720.2979 482.1934 720.3311 481.9736 720.5112 C
482.0713 720.6489 482.4561 720.6152 482.2305 720.7964 C
482.4834 720.7671 482.459 720.8696 482.6738 720.8564 C
482.6221 720.8979 482.4248 720.9204 482.583 720.9473 C
482.542 721.0142 482.4688 720.9248 482.3154 720.9395 C
482.2041 721.1367 482.876 721.5186 482.5625 721.6416 C
482.6895 721.7305 482.8389 721.8125 483 721.8857 C
482.7734 721.9614 482.9014 721.9429 482.9043 722.1157 C
482.8887 722.1694 482.7412 722.1499 482.6348 722.1533 C
482.8125 722.4521 482.417 722.6611 481.9941 722.7842 C
482.0674 722.9209 482.125 722.8408 482.3506 722.8408 C
482.1904 722.9302 482.4121 722.9346 482.2549 723.0229 C
482.0283 723.0674 481.9189 722.7964 481.8975 723.0122 C
482.2051 723.0229 481.8838 723.1338 482.251 723.1631 C
481.957 723.3574 481.9033 723.4814 481.6162 723.6074 C
481.9414 723.8096 481.832 723.9692 481.5117 724.1147 C
481.6777 724.5596 481.5791 725.0303 482.542 725.2583 C
482.1924 725.3384 482.6484 725.3667 482.5342 725.5825 C
482.8457 725.5322 483.0234 725.7783 483.0625 725.9932 C
481.3311 725.9424 L
447.2051 724.9326 L
444.0381 724.8389 L
409.9121 723.8281 L
405.3311 723.6938 L
405.4824 723.5771 405.541 723.4565 405.3516 723.3374 C
405.4199 723.2964 405.5186 723.2715 405.625 723.2534 C
405.1602 723.1948 405.6914 722.9067 405.0986 722.96 C
405.377 722.9131 405.6289 722.8477 405.9023 722.7979 C
405.8809 722.7017 405.666 722.6997 405.6426 722.6045 C
406.1328 722.6416 406.2266 722.772 406.5313 722.584 C
406.5098 722.4756 406.1992 722.5796 406.1758 722.6206 C
406.0068 722.6108 406.1172 722.4653 405.9121 722.4741 C
406.0234 722.4277 406.1602 722.436 406.2715 722.3916 C
406.2891 722.1885 406.0195 722.3711 405.916 722.3809 C
405.8867 722.3125 405.8281 722.2803 405.5654 722.2324 C
405.8027 722.1587 405.582 722.0957 405.9248 722.0566 C
405.8213 721.9141 405.584 722.0791 405.4805 722.0894 C
405.6719 721.8828 405.9414 721.7227 406.3828 721.6523 C
406.3184 721.5684 406.2197 721.6416 406.1152 721.6455 C
405.959 721.4487 406.7666 721.3936 406.3027 721.3252 C
406.5518 721.231 406.7217 721.2319 406.9297 721.2051 C
406.9063 721.1084 406.6855 721.2666 406.6641 721.1055 C
406.9551 721.1157 406.9121 721.064 407.2012 720.9814 C
407.4023 721.0137 407.0938 721.0508 407.2861 721.1235 C
407.5352 721.1299 407.0781 720.9912 407.4668 721.0366 C
407.4453 720.9849 407.291 720.9985 407.291 720.9385 C
407.2764 720.9141 407.7969 720.9038 407.3828 720.8481 C
407.4863 720.7676 408.0244 720.8296 407.7441 720.6738 C
408.0244 720.8066 408.0596 720.5708 408.3672 720.6924 C
408.207 720.3506 408.3457 719.8994 408.8369 719.7778 C
408.4932 719.6934 408.5967 719.5005 408.1309 719.6182 C
408.1455 719.5171 408.3574 719.5249 408.5781 719.5386 C
408.3457 719.4248 408.8184 719.4209 408.585 719.3071 c
408.6621 719.3452 408.7842 719.3628 408.9385 719.3633 C
408.8418 719.2725 408.6133 719.1768 408.3262 719.0684 C
408.3535 718.959 408.7188 719.0508 408.6797 719.1245 C
408.7754 719.0381 408.8555 718.9404 409.2168 719.001 C
409.0059 718.8042 408.7031 718.9248 408.332 718.8359 C
409.0791 718.7422 409.5508 718.418 409.5938 718.1777 C
409.5127 718.0117 409.4453 718.0889 409.2441 718.0278 C
409.2578 717.9092 409.5791 717.9644 409.6934 717.9033 C
409.5146 717.689 409.7295 717.5605 409.4414 717.4302 C
409.6719 717.4033 409.7461 717.2876 409.9785 717.2617 C
409.3252 717.0088 409.0947 716.6553 408.8506 716.3008 C
409.2773 716.4219 408.8223 716.189 409.125 716.0308 C
408.9668 716.0205 408.9375 716.082 408.7695 716.0664 C
409.0459 715.9663 408.8066 716.04 408.7754 715.8813 C
408.79 715.8276 408.9375 715.8472 409.041 715.8438 C
409.0625 715.4951 408.7861 715.0781 409.166 714.7339 C
408.7109 714.6621 409.292 714.3696 409.0039 714.2192 C
409.0811 714.1519 409.1348 714.2358 409.3594 714.1841 C
409.125 714.0679 409.5977 714.0659 409.3652 713.9517 C
409.8252 714.0708 409.417 713.9814 409.9883 713.9243 C
410.084 713.7637 410.1484 713.4463 409.6504 713.3574 C
409.9209 713.3213 409.7295 713.1147 409.5693 713.0298 C
409.8965 712.8633 409.9502 712.2715 409.6836 712.1987 C
409.7676 712.0239 410.1797 712.2515 410.1309 712.0732 C
409.8223 711.9023 409.9316 711.4556 409.8984 710.9536 C
410.3525 710.9414 409.8965 711.1177 410.25 711.103 C
410.252 710.9009 410.3906 710.894 410.1699 710.7759 C
409.8701 710.7852 410.4004 710.9619 409.9883 710.9097 C
409.999 710.6196 409.1855 710.3218 409.5684 710.1084 C
409.5205 709.9951 409.2354 709.9961 409.0371 709.9531 C
409.3105 709.6963 408.8818 709.4883 408.6152 709.2925 C
408.6191 709.2476 408.7246 709.2598 408.792 709.2515 C
408.3477 708.8525 409.1836 708.7178 409.3555 708.2471 C
409.3145 708.0239 408.9424 707.9609 408.6572 707.856 C
408.7207 707.7651 408.9307 707.7578 409.0176 707.6812 C
408.9941 707.5864 408.8438 707.5527 408.7559 707.4883 C
408.9043 707.3574 409.0371 707.4775 409.2031 707.4087 C
409.2725 707.1675 408.918 707.0415 408.5996 706.7881 C
408.8496 706.6079 408.668 706.3677 409.1396 706.4795 C
409.0244 706.3994 408.9199 706.3125 408.7031 706.2813 C
408.5781 706.1011 409.4473 706.082 408.9795 706.0117 C
409.0879 706.0024 409.3389 705.8452 409.3369 705.9292 C
409.5752 705.6533 408.9082 705.2246 409.1875 704.9048 c
409.2813 704.7998 409.5 704.7642 409.8135 704.7837 C
409.4434 704.6274 409.3965 704.3311 409.2988 704.2578 c
409.25 704.2251 409.0996 704.2803 409.1172 704.2988 c
409.0078 704.1812 409.1768 703.9624 408.7773 703.7788 C
409.0508 703.8628 409.1191 703.8296 409.3086 703.8872 C
409.5811 703.6123 409.8115 703.5796 410.0332 703.3989 C
409.9375 703.2612 409.5508 703.2959 409.7734 703.1133 C
409.5215 703.1445 409.5469 703.042 409.333 703.0537 C
409.3838 703.0127 409.5811 702.9912 409.4238 702.9629 C
409.4639 702.897 409.5371 702.9854 409.6895 702.9712 C
409.8037 702.7749 409.1309 702.3926 409.4434 702.269 C
409.3145 702.1797 409.1699 702.0986 409.0078 702.0244 C
409.2305 701.9492 409.1055 701.9678 409.1035 701.7944 C
409.1172 701.7417 409.2656 701.7612 409.3711 701.7573 C
409.1943 701.458 409.5898 701.249 410.0117 701.1265 C
409.9395 700.9897 409.8809 701.0708 409.6572 701.0703 C
409.8174 700.9795 409.5938 700.9771 409.752 700.8867 C
409.9785 700.8433 410.0898 701.1152 410.1064 700.8979 C
409.8037 700.8872 410.123 700.7778 409.7578 700.749 C
410.0498 700.5527 410.1016 700.4297 410.3926 700.3037 C
410.0674 700.1006 410.1738 699.9424 410.4961 699.7954 C
410.3301 699.3511 410.4277 698.8809 409.4639 698.6523 C
409.8115 698.5718 409.3594 698.5439 409.4727 698.3281 C
409.1621 698.3779 408.9824 698.1318 408.9434 697.917 C
410.6758 697.9688 L
444.8047 698.9775 L
447.9688 699.0728 L
482.0947 700.082 L
486.6748 700.2168 L
486.5225 700.333 486.4658 700.4536 486.6523 700.5723 C
f
0 D
406.4492 722.4429 m
406.4668 722.4941 406.623 722.48 406.623 722.5405 C
406.8184 722.5405 406.666 722.3457 406.7168 722.2651 C
406.5371 722.2729 406.6289 722.436 406.4492 722.4429 C
f
485.5596 701.4683 m
485.5391 701.417 485.3848 701.4307 485.3848 701.3696 C
485.1895 701.3696 485.3418 701.5659 485.2871 701.644 C
485.4707 701.6377 485.376 701.4741 485.5596 701.4683 C
f
*U
486.7373 700.6675 m
486.7568 700.7246 486.8369 700.6992 486.916 700.6738 C
487.0537 700.7456 487.0098 700.8833 486.7334 700.8535 C
486.8594 700.7515 486.5088 700.6724 486.7373 700.6675 C
f
U
u
*u
1 D
492.2529 485.3281 m
492.5625 485.3281 L
492.3545 484.5747 492.8887 484.5645 492.9697 484.1021 C
493.4854 484.269 493.8906 484.002 493.8926 483.3848 C
493.4336 483.2324 493.5781 483.6841 493.1758 483.5894 C
493.8906 483.0298 493.8262 482.1211 493.7891 481.2334 C
493.7744 481.1147 493.6035 481.147 493.4834 481.1318 C
493.4873 481.0112 493.5107 480.8774 493.54 480.7358 C
499.75 480.7358 L
500.0381 481.459 499.2559 482.4961 499.7275 482.9746 C
500.3818 482.3169 500.9092 481.5347 501.4258 480.7358 C
535.4727 480.7358 L
536.9268 480.7358 538.1055 481.9146 538.1055 483.3691 C
538.1055 521.1763 L
537.6621 521.3428 537.2197 521.5063 536.7842 521.6709 c
535.0381 522.3364 533.084 523.3608 531.3613 524.1289 c
530.085 524.6963 528.3506 524.7285 527.4707 525.6646 C
526.7539 525.7339 526.1777 525.9409 525.5244 526.0732 C
525.4717 526.3281 525.2764 526.4385 525.1172 526.585 C
517.792 527.0552 510.9404 524.5957 506.1768 521.0571 C
505.8887 520.7993 505.9014 520.2427 505.2549 520.3413 C
504.3486 518.4507 502.5234 517.4746 501.5713 515.6318 C
501.6035 515.1187 502.0186 514.9878 502.082 514.5054 C
501.8125 513.8862 500.9053 513.5986 500.1377 513.7886 C
500.1465 512.9956 499.79 511.8628 499.1123 511.4341 C
499.374 509.6382 497.8965 508.5313 497.6807 506.9297 c
497.4727 505.3926 497.5322 504.0151 496.9629 502.4258 C
496.9502 502.0293 496.5488 502.0215 496.4531 501.7085 C
496.4365 501.3184 496.9365 501.4414 496.9629 501.0952 C
496.4756 498.5854 497.0732 497.1123 497.0664 494.8511 C
495.6982 494.0508 497.4277 491.5601 496.8613 490.1401 C
496.9609 490.0356 497.0625 489.9336 497.1689 489.8335 C
496.6484 489.7705 495.9668 489.3311 496.041 489.0142 C
496.3955 489.3809 496.1104 488.6304 496.041 488.9121 C
495.7813 488.5991 496.4404 488.9858 496.3496 488.5029 C
495.4502 488.6138 495.1602 487.6938 494.8125 486.9678 C
495.0527 486.9419 495.0898 486.7524 495.5313 486.8657 C
495.3008 486.4385 495.0283 486.6914 494.7109 486.353 C
494.6191 486.0537 494.6191 486.0376 494.7109 485.7388 C
493.9258 485.355 493.8115 484.3887 492.9697 484.5107 C
492.7871 485.103 493.3203 484.9805 493.2783 485.4316 c
493.2441 485.7402 493.123 485.957 492.8701 486.0459 c
492.4375 486.2031 492.8516 485.5156 492.5625 485.5337 C
491.6709 486.0938 492.1094 487.2505 492.0488 488.1963 c
491.9883 489.2109 491.6592 490.2319 491.6387 491.3696 c
491.6016 493.8022 491.4736 496.3037 491.7422 498.2275 C
491.9561 498.2896 492.0918 498.4243 492.1523 498.6372 C
492.3926 498.6396 492.4521 498.4614 492.7666 498.5361 C
492.4268 500.1016 493.8164 500.7148 494.4023 502.1182 C
494.1426 502.7383 494.6318 503.2642 494.5068 504.064 C
494.667 504.3159 495.1934 504.7373 494.8125 505.1899 C
495.665 506.124 496.8223 507.7485 495.7354 508.9775 C
497.8408 509.085 497.6885 512.1646 498.9082 513.481 C
498.7949 513.6763 498.7666 513.9512 498.5 513.9937 C
499.1621 515.0527 499.1865 516.2178 500.4443 516.7573 C
500.6367 516.9521 500.3818 516.9438 500.4443 517.2695 C
502.5332 519.0039 504.2158 521.144 506.5859 522.5923 C
507.6816 523.8516 509.3828 524.5059 510.6826 525.563 c
510.8867 525.7324 510.8105 525.5522 511.0918 525.563 C
513.2295 527.2114 516.1914 528.0352 518.8721 529.1445 C
520.2705 528.937 521.3828 529.8027 522.6592 529.9629 c
525.7256 530.3516 528.9619 530.5366 532.0762 529.8613 C
534.1377 529.6406 536.1592 529.2124 538.1055 528.6147 C
538.1055 701.8467 L
538.1055 703.3008 536.9268 704.4785 535.4727 704.4785 C
356.478 704.4785 L
355.0234 704.4785 353.8457 703.3008 353.8457 701.8467 C
353.8457 483.3691 L
353.8457 481.9146 355.0234 480.7358 356.478 480.7358 C
492.7559 480.7358 L
492.4434 482.3018 492.2598 483.8965 492.2529 485.3281 C
n
0 D
523.2744 498.7412 m
523.5859 499.52 524.5469 500.373 524.9121 501.4023 C
525.4727 501.4521 525.8633 501.3306 526.1406 501.0952 C
526.2861 498.2305 525.8516 495.4175 523.375 494.5425 C
522.7021 495.2007 522.8223 497.6128 523.2744 498.7412 c
n
517.3359 517.6787 m
517.209 517.5317 516.9824 517.4844 516.7217 517.4746 C
516.751 517.8867 517.1563 517.9297 517.3359 517.6787 C
n
515.083 499.6626 m
515.083 498.9453 L
514.6895 498.6836 514.5889 498.3662 514.0605 498.4326 c
512.6328 498.6147 513.8857 501.0342 515.083 499.6626 C
n
513.5469 516.7573 m
513.3809 516.1885 512.4873 515.8643 511.9111 516.041 C
512.5264 516.209 512.7461 516.7769 513.5469 516.7573 C
n
502.5938 488.6055 m
502.5938 488.2979 L
502.4209 488.1377 502.0039 488.3086 502.0811 488.7075 C
502.3281 488.7495 502.3057 488.52 502.5938 488.6055 C
n
498.6025 484.6128 m
498.5352 484.7158 498.3652 484.7188 498.3975 484.9189 C
498.4795 484.8647 498.5635 484.8125 498.7031 484.8174 C
498.7158 484.6338 498.5771 484.6016 498.6025 484.4072 C
498.1924 484.4072 L
498.208 484.5977 498.5391 484.4702 498.6025 484.6128 C
n
497.0654 488.8096 m
497.4775 488.7915 497.3467 488.2397 497.2715 488.1963 C
496.9014 488.0996 497.1289 488.5991 497.0654 488.8096 C
n
497.2773 526.4902 m
497.6572 529.5376 502.4785 529.9609 502.8057 526.2852 C
502.5977 524.4854 500.3164 522.6567 498.3008 523.9302 c
497.4951 524.4395 497.1982 525.8516 497.2773 526.4902 c
n
491.334 511.8438 m
491.459 512.8076 492.9912 511.8896 492.5625 511.333 C
491.9346 511.2856 491.5566 511.4863 491.334 511.8438 C
n
*U
0 O
0.098039 0.082353 0.247059 0 0.898039 0.87451 0.764706 Xa
491.334 511.8438 m
491.5566 511.4863 491.9346 511.2856 492.5625 511.333 C
492.9912 511.8896 491.459 512.8076 491.334 511.8438 C
f
493.7891 481.2334 m
493.8262 482.1211 493.8906 483.0298 493.1758 483.5894 C
493.5781 483.6841 493.4336 483.2324 493.8926 483.3848 C
493.8906 484.002 493.4854 484.269 492.9697 484.1021 C
492.8887 484.5645 492.3545 484.5747 492.5625 485.3281 C
492.2529 485.3281 L
492.2598 483.8965 492.4434 482.3018 492.7559 480.7358 C
493.54 480.7358 L
493.5107 480.8774 493.4873 481.0112 493.4834 481.1318 C
493.6035 481.147 493.7744 481.1147 493.7891 481.2334 C
f
522.6592 529.9629 m
521.3828 529.8027 520.2705 528.937 518.8721 529.1445 C
516.1914 528.0352 513.2295 527.2114 511.0918 525.563 C
510.8105 525.5522 510.8867 525.7324 510.6826 525.563 c
509.3828 524.5059 507.6816 523.8516 506.5859 522.5923 C
504.2158 521.144 502.5332 519.0039 500.4443 517.2695 C
500.3818 516.9438 500.6367 516.9521 500.4443 516.7573 C
499.1865 516.2178 499.1621 515.0527 498.5 513.9937 C
498.7666 513.9512 498.7949 513.6763 498.9082 513.481 C
497.6885 512.1646 497.8408 509.085 495.7354 508.9775 C
496.8223 507.7485 495.665 506.124 494.8125 505.1899 C
495.1934 504.7373 494.667 504.3159 494.5068 504.064 C
494.6318 503.2642 494.1426 502.7383 494.4023 502.1182 C
493.8164 500.7148 492.4268 500.1016 492.7666 498.5361 C
492.4521 498.4614 492.3926 498.6396 492.1523 498.6372 C
492.0918 498.4243 491.9561 498.2896 491.7422 498.2275 C
491.4736 496.3037 491.6016 493.8022 491.6387 491.3696 c
491.6592 490.2319 491.9883 489.2109 492.0488 488.1963 c
492.1094 487.2505 491.6709 486.0938 492.5625 485.5337 C
492.8516 485.5156 492.4375 486.2031 492.8701 486.0459 c
493.123 485.957 493.2441 485.7402 493.2783 485.4316 c
493.3203 484.9805 492.7871 485.103 492.9697 484.5107 C
493.8115 484.3887 493.9258 485.355 494.7109 485.7388 C
494.6191 486.0376 494.6191 486.0537 494.7109 486.353 C
495.0283 486.6914 495.3008 486.4385 495.5313 486.8657 C
495.0898 486.7524 495.0527 486.9419 494.8125 486.9678 C
495.1602 487.6938 495.4502 488.6138 496.3496 488.5029 C
496.4404 488.9858 495.7813 488.5991 496.041 488.9121 C
496.1104 488.6304 496.3955 489.3809 496.041 489.0142 C
495.9668 489.3311 496.6484 489.7705 497.1689 489.8335 C
497.0625 489.9336 496.9609 490.0356 496.8613 490.1401 C
497.4277 491.5601 495.6982 494.0508 497.0664 494.8511 C
497.0732 497.1123 496.4756 498.5854 496.9629 501.0952 C
496.9365 501.4414 496.4365 501.3184 496.4531 501.7085 C
496.5488 502.0215 496.9502 502.0293 496.9629 502.4258 C
497.5322 504.0151 497.4727 505.3926 497.6807 506.9297 c
497.8965 508.5313 499.374 509.6382 499.1123 511.4341 C
499.79 511.8628 500.1465 512.9956 500.1377 513.7886 C
500.9053 513.5986 501.8125 513.8862 502.082 514.5054 C
502.0186 514.9878 501.6035 515.1187 501.5713 515.6318 C
502.5234 517.4746 504.3486 518.4507 505.2549 520.3413 C
505.9014 520.2427 505.8887 520.7993 506.1768 521.0571 C
510.9404 524.5957 517.792 527.0552 525.1172 526.585 C
525.2764 526.4385 525.4717 526.3281 525.5244 526.0732 C
526.1777 525.9409 526.7539 525.7339 527.4707 525.6646 C
528.3506 524.7285 530.085 524.6963 531.3613 524.1289 c
533.084 523.3608 535.0381 522.3364 536.7842 521.6709 c
537.2197 521.5063 537.6621 521.3428 538.1055 521.1763 C
538.1055 528.6147 L
536.1592 529.2124 534.1377 529.6406 532.0762 529.8613 C
528.9619 530.5366 525.7256 530.3516 522.6592 529.9629 c
f
499.75 480.7358 m
501.4258 480.7358 L
500.9092 481.5347 500.3818 482.3169 499.7275 482.9746 C
499.2559 482.4961 500.0381 481.459 499.75 480.7358 C
f
516.7217 517.4746 m
516.9824 517.4844 517.209 517.5317 517.3359 517.6787 C
517.1563 517.9297 516.751 517.8867 516.7217 517.4746 C
f
514.0605 498.4326 m
514.5889 498.3662 514.6895 498.6836 515.083 498.9453 C
515.083 499.6626 L
513.8857 501.0342 512.6328 498.6147 514.0605 498.4326 c
f
498.3008 523.9302 m
500.3164 522.6567 502.5977 524.4854 502.8057 526.2852 C
502.4785 529.9609 497.6572 529.5376 497.2773 526.4902 c
497.1982 525.8516 497.4951 524.4395 498.3008 523.9302 c
f
526.1406 501.0952 m
525.8633 501.3306 525.4727 501.4521 524.9121 501.4023 C
524.5469 500.373 523.5859 499.52 523.2744 498.7412 c
522.8223 497.6128 522.7021 495.2007 523.375 494.5425 C
525.8516 495.4175 526.2861 498.2305 526.1406 501.0952 C
f
497.2715 488.1963 m
497.3467 488.2397 497.4775 488.7915 497.0654 488.8096 C
497.1289 488.5991 496.9014 488.0996 497.2715 488.1963 C
f
498.7031 484.8174 m
498.5635 484.8125 498.4795 484.8647 498.3975 484.9189 C
498.3652 484.7188 498.5352 484.7158 498.6025 484.6128 C
498.5391 484.4702 498.208 484.5977 498.1924 484.4072 C
498.6025 484.4072 L
498.5771 484.6016 498.7158 484.6338 498.7031 484.8174 C
f
513.5469 516.7573 m
512.7461 516.7769 512.5264 516.209 511.9111 516.041 C
512.4873 515.8643 513.3809 516.1885 513.5469 516.7573 C
f
502.5938 488.2979 m
502.5938 488.6055 L
502.3057 488.52 502.3281 488.7495 502.0811 488.7075 C
502.0039 488.3086 502.4209 488.1377 502.5938 488.2979 C
f
U
U
u
u
*u
%AI3_Note:<< /operation /union >>1 XR
126.1216 88.0439 m
290.4551 158.9902 l
291.7905 159.5664 293.3394 158.9541 293.915 157.6172 c
380.5117 -42.9668 l
381.0879 -44.3008 380.4736 -45.8496 379.1382 -46.4258 c
214.8032 -117.374 l
213.4702 -117.9492 211.9194 -117.334 211.3438 -115.998 c
124.7476 84.585 l
124.1709 85.9209 124.7866 87.4688 126.1216 88.0439 c
Bb
1 (Unnamed gradient 10) 154.5327 17.3555 0 184.2622 0.9181 -0.3964 0.3964 0.9181 -2694.2322 3875.8306 Bg
169.1711 73.0415 90.2781 -209.0926 122.9053 88.835 Xm
7295.9028 3150.0884 90.2781 -209.0926 -7172.9976 -3061.2539 Bc
84.5856 36.5208 90.2781 -209.0926 122.9053 88.835 Bm
84.5856 36.5208 90.2781 -209.0926 207.4907 125.3555 Bm
7295.9028 3150.0884 90.2781 -209.0926 292.0762 161.877 Bc
f
0 BB
/BBAccumRotation (0.407550) XT
*U
/BBAccumRotation (0.407550) XT
*u
%AI3_Note:
0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 Xa
0 XR
213.7632 -117.9785 m
212.5547 -117.9785 211.4648 -117.2617 210.9868 -116.1523 C
124.3906 84.4307 L
124.0708 85.1719 124.0586 85.9932 124.3564 86.7432 c
124.6543 87.4932 125.2266 88.082 125.9678 88.4014 C
290.3008 159.3477 L
290.6831 159.5117 291.0859 159.5957 291.499 159.5957 c
292.7065 159.5957 293.7949 158.8799 294.272 157.7705 C
380.8687 -42.8125 L
381.1885 -43.5537 381.2007 -44.374 380.9033 -45.124 c
380.6055 -45.874 380.0332 -46.4629 379.292 -46.7832 C
214.9575 -117.7314 L
214.5767 -117.8955 214.1753 -117.9785 213.7632 -117.9785 C
213.7632 -117.9785 L
f
1 D
291.499 158.8184 m
291.1929 158.8184 290.8936 158.7559 290.6089 158.6328 C
126.2759 87.6865 L
125.7251 87.4502 125.3003 87.0127 125.0791 86.4561 c
124.8579 85.8994 124.8667 85.29 125.1045 84.7393 C
211.7007 -115.8438 L
212.1772 -116.9482 213.5347 -117.4971 214.6494 -117.0166 C
378.9839 -46.0684 L
379.5347 -45.8311 379.9595 -45.3936 380.1807 -44.8369 c
380.4014 -44.2803 380.3921 -43.6709 380.1548 -43.1211 C
293.5581 157.4629 L
293.2036 158.2861 292.3955 158.8184 291.499 158.8184 C
291.499 158.8184 L
f
*U
U
*u
%AI3_Note:<< /operation /union >>0 D
0.733333 0.67451 0.658824 0.831373 0.062745 0.062745 0.062745 Xa
1 XR
140.3828 84.0498 m
283.5713 145.8652 l
284.9058 146.4424 286.4551 145.8281 287.0313 144.4932 c
348.8486 1.30371 l
349.4253 -0.030273 348.8096 -1.57813 347.4741 -2.15527 c
204.2861 -63.9727 l
202.9517 -64.5479 201.4043 -63.9346 200.8276 -62.5986 c
139.0103 80.5879 l
138.4336 81.9238 139.0483 83.4717 140.3828 84.0498 c
f
/BBAccumRotation (0.407550) XT
*U
/BBAccumRotation (0.407550) XT
u
*u
393.541 176.0117 m
546.3818 82.8545 l
547.624 82.0977 548.0205 80.4795 547.2598 79.2383 c
433.5547 -107.3213 l
432.7969 -108.5615 431.1768 -108.9561 429.9355 -108.1973 c
277.0933 -15.0391 l
275.8516 -14.2822 275.459 -12.6631 276.2163 -11.4219 c
389.9229 175.1338 l
390.6816 176.3779 392.2988 176.7686 393.541 176.0117 c
Bb
1 (Unnamed gradient 10) 295.0088 45.4863 0 184.2637 0.8539 0.5205 -0.5205 0.8539 5614.2441 -3010.5471 Bg
157.3427 -95.9092 -118.5396 -194.4686 392.3374 179.0957 Xm
6905.6729 -4209.3955 -118.5396 -194.4686 -6513.335 4388.4912 Bc
78.6714 -47.9546 -118.5396 -194.4686 392.3374 179.0957 Bm
78.6714 -47.9546 -118.5396 -194.4686 471.0088 131.1406 Bm
6905.6729 -4209.3955 -118.5396 -194.4686 549.6797 83.1865 Bc
f
0 BB
*U
*u
%AI3_Note:
0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 Xa
0 XR
431.3037 -108.9727 m
430.75 -108.9727 430.207 -108.8193 429.7324 -108.5293 C
276.8911 -15.3711 L
276.2017 -14.9512 275.7173 -14.2881 275.5273 -13.5039 c
275.3374 -12.7197 275.4639 -11.9082 275.8843 -11.2197 C
389.5908 175.3359 L
390.1445 176.2441 391.1094 176.7861 392.1719 176.7861 c
392.7251 176.7861 393.2681 176.6328 393.7432 176.3438 C
546.584 83.1865 L
547.2764 82.7646 547.7617 82.1006 547.9512 81.3145 c
548.1396 80.5313 548.0127 79.7217 547.5908 79.0352 C
433.8867 -107.5234 L
433.332 -108.4307 432.3672 -108.9727 431.3037 -108.9727 C
431.3037 -108.9727 L
f
1 D
392.1719 176.0088 m
391.3828 176.0088 390.666 175.6055 390.2549 174.9316 C
276.5483 -11.624 L
276.2358 -12.1357 276.1421 -12.7383 276.2832 -13.3203 c
276.4243 -13.9023 276.7837 -14.3955 277.2954 -14.707 C
430.1377 -107.8652 L
431.1689 -108.4961 432.5986 -108.1416 433.2227 -107.1182 C
546.9277 79.4404 L
547.2402 79.9512 547.335 80.5508 547.1953 81.1318 c
547.0547 81.7158 546.6934 82.209 546.1797 82.5225 C
393.3389 175.6797 L
392.9854 175.8945 392.582 176.0088 392.1719 176.0088 C
392.1719 176.0088 L
f
*U
U
*u
%AI3_Note:<< /operation /union >>0 D
0.733333 0.67451 0.658824 0.831373 0.062745 0.062745 0.062745 Xa
1 XR
398.5176 162.0645 m
531.6924 80.8926 l
532.9346 80.1357 533.3271 78.5156 532.5703 77.2734 c
451.3994 -55.9004 l
450.6445 -57.1436 449.0215 -57.5352 447.7832 -56.7773 c
314.6079 24.3945 l
313.3657 25.1494 312.9727 26.7676 313.73 28.0098 c
394.9004 161.1836 l
395.6572 162.4258 397.2773 162.8193 398.5176 162.0645 c
f
*U
u
%AI3_Note:
1 Ap
0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa
0 XR
216.0337 115.9912 m
214.0566 110.502 208.0049 107.6592 202.5166 109.6367 c
197.0293 111.6133 194.1787 117.6592 196.1577 123.1523 c
198.1328 128.6406 204.1865 131.4854 209.6748 129.5107 c
215.1631 127.5322 218.0103 121.4795 216.0337 115.9912 c
f
204.2363 111.4639 m
199.3892 112.832 196.5718 117.876 197.9404 122.7188 c
199.311 127.5674 204.3535 130.3887 209.2002 129.0176 c
214.0449 127.6475 216.8696 122.6084 215.4951 117.7607 c
214.125 112.9092 209.083 110.0908 204.2363 111.4639 c
Bb
0 0 0 0 Bh
1 (Unnamed gradient 82) 447.1709 29.2139 0 27.149 -0.2721 0.9622 -0.9622 -0.2721 18364.8945 2753.989 Bg
-7.38725 -26.1228 -26.1228 7.38725 194.1343 112.4424 Bm
f
0 BB
0 Ap
0 0 0 0 1 1 1 Xa
213.6621 119.2881 m
213.7012 119.4023 213.7471 119.5215 213.7817 119.6387 c
214.7402 123.0371 212.7627 126.5742 209.3633 127.5391 c
209.2896 127.5605 209.2124 127.5723 209.1392 127.5928 C
212.29 126.1182 214.1382 122.7441 213.6621 119.2881 C
f
U
u
1 Ap
0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa
478.6514 124.0127 m
476.6719 118.5215 470.623 115.6797 465.1348 117.6592 c
459.6475 119.6328 456.7959 125.6797 458.7734 131.1748 c
460.749 136.6621 466.8047 139.5078 472.2939 137.5313 c
477.7803 135.5537 480.627 129.499 478.6514 124.0127 c
f
466.8535 119.4854 m
462.0068 120.8525 459.1904 125.8975 460.5576 130.7412 c
461.9287 135.5898 466.9707 138.4102 471.8174 137.0391 c
476.6631 135.6689 479.4863 130.6299 478.1133 125.7803 c
476.7432 120.9307 471.7002 118.1133 466.8535 119.4854 c
Bb
0 0 0 0 Bh
1 (Unnamed gradient 82) 367.9829 279.7549 0 27.1431 -0.2721 0.9622 -0.9622 -0.2721 18364.8945 2753.989 Bg
-7.38562 -26.117 -26.117 7.38562 456.752 120.4648 Bm
f
0 BB
0 Ap
0 0 0 0 1 1 1 Xa
476.2783 127.3076 m
476.3184 127.4238 476.3652 127.54 476.3984 127.6602 c
477.3584 131.0586 475.3789 134.5957 471.9795 135.5586 c
471.9072 135.5811 471.8291 135.5918 471.7568 135.6143 C
474.9072 134.1416 476.7539 130.7646 476.2783 127.3076 C
f
U
U
260.3643 703.0444 m
259.6992 703.708 258.8003 703.418 258.3696 702.9873 C
258.3696 699.6392 257.6777 669.729 257.6777 658.0991 c
257.6777 647.9453 264.4492 647.6953 267.0234 647.6953 c
270.4009 647.6953 275.8691 649.5518 275.8691 661.7319 c
275.8691 671.8657 275.8691 706.3672 275.8691 713.6772 c
275.8691 720.9854 270.332 723.0518 267.3984 723.0518 c
266.0688 723.0518 259.6724 722.2222 259.6724 714.4976 c
259.6724 706.7729 259.6724 704.6973 y
261.335 704.6973 262.0024 704.6973 V
262.0024 709.0161 262.0024 710.1797 262.0024 713.915 c
262.0024 717.6558 263.4941 720.9746 267.3984 720.9746 c
271.3027 720.9746 273.5444 717.4883 273.5444 714.0811 c
273.5444 710.6772 273.5444 666.8223 273.5444 661.0884 c
273.5444 655.3599 272.4648 650.0435 267.1509 650.0435 c
261.832 650.0435 259.6724 653.1152 259.6724 658.4316 c
259.6724 663.7476 260.3643 695.0796 260.3643 703.0444 C
Bb
1 (Unnamed gradient 2) 257.6777 685.3735 0 18.1914 1 0 0 1 0 0 Bg
18.1914 0 0 -79.3564 257.6777 725.0518 Xm
8049.8848 0 0 -79.3564 -7792.105 725.0518 Bc
5.21215 0 0 -79.3564 257.7798 725.0518 Bm
6.54072 0 0 -79.3564 262.9922 725.0518 Bm
3.88356 0 0 -79.3564 269.5327 725.0518 Bm
2.45278 0 0 -79.3564 273.4165 725.0518 Bm
0 0 0 -79.3564 275.8691 725.0518 Bm
8049.8848 0 0 -79.3564 275.8691 725.0518 Bc
f
0 BB
u
*u
0 g
365.7441 419.6631 m
365.7441 419.6631 l
365.7441 421.1172 366.9229 422.2964 368.3765 422.2964 C
524.3398 422.2964 l
525.793 422.2964 526.9707 421.1172 526.9707 419.6631 C
526.9707 378.5034 L
526.9707 378.5034 L
526.9707 263.7021 l
526.9707 262.2471 525.793 261.0693 524.3398 261.0693 C
368.3765 261.0693 l
366.9229 261.0693 365.7441 262.2471 365.7441 263.7021 C
365.7441 419.6631 L
365.7441 419.6631 L
365.7441 419.6631 l
f
1 D
535.8633 431.6182 m
356.8672 431.6182 l
355.4141 431.6182 354.2344 430.4385 354.2344 428.9849 C
354.2344 210.5068 l
354.2344 209.0518 355.4141 207.875 356.8672 207.875 C
535.8633 207.875 l
537.3145 207.875 538.4941 209.0518 538.4941 210.5068 C
538.4941 428.9849 l
538.4941 430.4385 537.3145 431.6182 535.8633 431.6182 C
535.8633 431.6182 l
Bb
1 (Unnamed gradient 1) 2.02832 -1.67578 0 1 184.2598 0 0 -184.2598 -1427468.0412 1572741.9284 Bg
184.2598 0 0 960.7823 354.2305 -160.6445 Xm
1436164.3912 0 0 960.7823 -1435810.0412 -160.6445 Bc
92.1299 0 0 960.7823 354.2305 -160.6445 Bm
92.1299 0 0 960.7823 446.3604 -160.6445 Bm
1436164.3912 0 0 960.7823 538.4902 -160.6445 Bc
f
0 BB
*U
0 D
0.32549 0.254902 0.356863 0 0.690196 0.686275 0.631373 Xa
356.8672 431.6182 m
356.8672 431.2295 L
535.8633 431.2295 l
537.0996 431.2271 538.1035 430.2236 538.1055 428.9849 C
538.1055 210.5068 l
538.1035 209.2666 537.0996 208.2656 535.8633 208.2637 C
356.8672 208.2637 l
355.6284 208.2656 354.6255 209.2666 354.623 210.5068 C
354.623 428.9849 l
354.6255 430.2236 355.6294 431.2271 356.8672 431.2295 C
356.8672 431.6182 L
356.8672 432.0068 l
355.1987 432.0063 353.8462 430.6533 353.8457 428.9849 C
353.8457 210.5068 l
353.8457 208.8369 355.1997 207.4863 356.8672 207.4863 C
535.8633 207.4863 l
537.5293 207.4863 538.8828 208.8369 538.8828 210.5068 C
538.8828 428.9849 l
538.8828 430.6533 537.5313 432.0063 535.8633 432.0068 C
356.8672 432.0068 L
356.8672 431.6182 L
f
0.733333 0.67451 0.658824 0.831373 0.062745 0.062745 0.062745 Xa
1 XR
368.3765 422.2964 m
524.3398 422.2964 l
525.793 422.2964 526.9707 421.1172 526.9707 419.6631 C
526.9707 263.7021 l
526.9707 262.2471 525.793 261.0693 524.3398 261.0693 C
368.3765 261.0693 l
366.9229 261.0693 365.7441 262.2471 365.7441 263.7021 C
365.7441 419.6631 l
365.7441 421.1172 366.9229 422.2964 368.3765 422.2964 C
368.3765 422.2964 l
f
0.662745 0.592157 0.580392 0.411765 0.278431 0.278431 0.278431 Xa
0 XR
524.3398 422.2964 m
368.3765 422.2964 l
366.9229 422.2964 365.7441 421.1172 365.7441 419.6631 C
365.7441 319.748 l
384.0723 332.9346 406.1738 341.6826 433.1289 341.6826 c
469.1523 341.6826 501.2227 356.7949 526.9707 378.5034 C
526.9707 419.6631 l
526.9707 421.1172 525.793 422.2964 524.3398 422.2964 C
524.3398 422.2964 l
f
U
LB
%AI5_EndLayer--
%AI3_BeginCrops
userdict /AI3_noCropMarks known not {
0 A
u
u
0 R
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 XS
0 J 0 j 0.5 w 4 M []0 d0 XR
92.793 -151.1191 m
65.793 -151.1191 L
S
101.793 -160.1191 m
101.793 -187.1191 L
S
U
u
92.793 748.4453 m
65.793 748.4453 L
S
101.793 757.4453 m
101.793 784.4453 L
S
U
u
710.502 748.4453 m
737.502 748.4453 L
S
701.502 757.4453 m
701.502 784.4453 L
S
U
u
710.502 -151.1191 m
737.502 -151.1191 L
S
701.502 -160.1191 m
701.502 -187.1191 L
S
U
U
} if
%AI3_EndCrops
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
